version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: electronics_store_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: electronics_store
      MYSQL_USER: electronics_user
      MYSQL_PASSWORD: electronics_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./backend/database/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    networks:
      - electronics_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: electronics_store_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - electronics_network

  # MinIO (S3 Compatible Storage)
  minio:
    image: minio/minio:latest
    container_name: electronics_store_minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - electronics_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: electronics_store_backend
    restart: unless-stopped
    environment:
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: electronics_user
      DB_PASSWORD: electronics_password
      DB_NAME: electronics_store
      REDIS_HOST: redis
      REDIS_PORT: 6379
      S3_ENDPOINT: minio:9000
      S3_ACCESS_KEY_ID: minioadmin
      S3_SECRET_ACCESS_KEY: minioadmin123
      S3_BUCKET_NAME: electronics-store
      JWT_ACCESS_SECRET: your-super-secret-access-key-change-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production
    ports:
      - "8080:8080"
    depends_on:
      - mysql
      - redis
      - minio
    networks:
      - electronics_network
    volumes:
      - ./backend:/app
    command: go run ./cmd/server/main.go

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: electronics_store_frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - electronics_network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: electronics_store_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - electronics_network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  electronics_network:
    driver: bridge
